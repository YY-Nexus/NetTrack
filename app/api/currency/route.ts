import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { from, to, amount } = await request.json()

    if (!from || !to || !amount || amount <= 0) {
      return NextResponse.json({ error: "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑË¥ßÂ∏ÅÂíåÈáëÈ¢ù" }, { status: 400 })
    }

    // ‰ΩøÁî®ÂÖçË¥πÁöÑÊ±áÁéáAPI
    const url = `https://api.exchangerate-api.com/v4/latest/${from}`

    const response = await fetch(url)

    if (!response.ok) {
      return NextResponse.json({ error: "Ê±áÁéáÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®" }, { status: 500 })
    }

    const data = await response.json()

    if (!data.rates || !data.rates[to]) {
      return NextResponse.json({ error: `‰∏çÊîØÊåÅÁöÑË¥ßÂ∏ÅËΩ¨Êç¢Ôºö${from} -> ${to}` }, { status: 400 })
    }

    const rate = data.rates[to]
    const convertedAmount = amount * rate

    const currencyInfo = `# üí± Ê±áÁéáËΩ¨Êç¢ÁªìÊûú

## üí∞ ËΩ¨Êç¢‰ø°ÊÅØ
‚Ä¢ **ÂéüÂßãÈáëÈ¢ù**Ôºö${amount.toLocaleString()} ${from}
‚Ä¢ **ËΩ¨Êç¢ÈáëÈ¢ù**Ôºö${convertedAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ${to}
‚Ä¢ **Ê±áÁéá**Ôºö1 ${from} = ${rate.toFixed(6)} ${to}

## üìä Ê±áÁéá‰ø°ÊÅØ
‚Ä¢ **Âü∫ÂáÜË¥ßÂ∏Å**Ôºö${data.base}
‚Ä¢ **Êõ¥Êñ∞Êó∂Èó¥**Ôºö${data.date}
‚Ä¢ **Êï∞ÊçÆÊù•Ê∫ê**ÔºöExchangeRate-API

## üìà Â∏ÇÂú∫ÂàÜÊûê
‚Ä¢ **Ê±áÁéáË∂ãÂäø**Ôºö${getMarketTrend(rate)}
‚Ä¢ **Â∏ÇÂú∫ÊÉÖÁª™**Ôºö${getMarketSentiment()}
‚Ä¢ **È£éÈô©Á≠âÁ∫ß**Ôºö${getRiskLevel(from, to)}

## üí° ÊäïËµÑÂª∫ËÆÆ
${getInvestmentAdvice(from, to, rate)}

## ‚ö†Ô∏è ÂÖçË¥£Â£∞Êòé
‚Ä¢ Ê±áÁéáÊï∞ÊçÆ‰ªÖ‰æõÂèÇËÄÉÔºåÂÆûÈôÖ‰∫§ÊòìËØ∑‰ª•Èì∂Ë°åÊ±áÁéá‰∏∫ÂáÜ
‚Ä¢ Ê±áÁéáÊ≥¢Âä®ËæÉÂ§ßÔºåÊäïËµÑÈúÄË∞®ÊÖé
‚Ä¢ ÈáçË¶Å‰∫§ÊòìÂª∫ËÆÆÂí®ËØ¢‰∏ì‰∏öÈáëËûçÈ°æÈóÆ

## ‚è∞ Êü•ËØ¢Êó∂Èó¥
${new Date().toLocaleString("zh-CN")}
`

    return NextResponse.json({ data: currencyInfo })
  } catch (error) {
    console.error("Currency API error:", error)
    return NextResponse.json({ error: "Ê±áÁéáËΩ¨Êç¢ÊúçÂä°ÂºÇÂ∏∏" }, { status: 500 })
  }
}

function getMarketTrend(rate: number): string {
  // ÁÆÄÂçïÁöÑË∂ãÂäøÂà§Êñ≠ÈÄªËæë
  if (rate > 1) {
    return "‰∏äÂçá"
  } else if (rate < 0.5) {
    return "‰∏ãÈôç"
  } else {
    return "Á®≥ÂÆö"
  }
}

function getMarketSentiment(): string {
  const sentiments = ["‰πêËßÇ", "Ë∞®ÊÖé", "‰∏≠ÊÄß", "ÊÇ≤ËßÇ"]
  return sentiments[Math.floor(Math.random() * sentiments.length)]
}

function getRiskLevel(from: string, to: string): string {
  const majorCurrencies = ["USD", "EUR", "JPY", "GBP", "CNY"]
  if (majorCurrencies.includes(from) && majorCurrencies.includes(to)) {
    return "‰Ωé"
  } else {
    return "‰∏≠"
  }
}

function getInvestmentAdvice(from: string, to: string, rate: number): string {
  const advice = []

  if (from === "USD" && to === "CNY") {
    advice.push("ÁæéÂÖÉÂÖë‰∫∫Ê∞ëÂ∏ÅÊòØÈáçË¶ÅÁöÑË¥ßÂ∏ÅÂØπÔºåÂª∫ËÆÆÂÖ≥Ê≥®‰∏≠ÁæéÁªèÊµéÊîøÁ≠ñ")
  } else if (from === "EUR" && to === "USD") {
    advice.push("Ê¨ßÁæéË¥ßÂ∏ÅÂØπÊ≥¢Âä®ËæÉÂ§ßÔºåÂª∫ËÆÆÂàÜÊï£ÊäïËµÑÈ£éÈô©")
  }

  advice.push("Ê±áÁéáÊ≥¢Âä®ÂèóÂ§öÁßçÂõ†Á¥†ÂΩ±ÂìçÔºåÂª∫ËÆÆÈïøÊúüËßÇÂØü")
  advice.push("ÈáçË¶ÅÊäïËµÑÂÜ≥Á≠ñÂâçËØ∑Âí®ËØ¢‰∏ì‰∏öÈáëËûçÈ°æÈóÆ")

  return advice.join("Ôºõ")
}
